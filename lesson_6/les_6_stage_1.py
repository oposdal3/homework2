"""
Подсчитать, сколько было выделено памяти под переменные в ранее разработанных
программах в рамках первых трех уроков. Проанализировать результат и определить
программы с наиболее эффективным использованием памяти.
По аналогии с эмпирической оценкой алгоритмов идеальным решением будет:
● выбрать хорошую задачу, которую имеет смысл оценивать по памяти;
● написать 3 варианта кода (один у вас уже есть);
● проанализировать 3 варианта и выбрать оптимальный;
● результаты анализа (количество занятой памяти в вашей среде разработки)
вставить в виде комментариев в файл с кодом. Не забудьте указать версию и
разрядность вашей ОС и интерпретатора Python;
● написать общий вывод: какой из трёх вариантов лучше и почему.
у меня 16 ГБ оперативной памяти
"""
import sys


def kol_numbers1(m, n):            # занимает 448 байта
    if len(str(m)) == 1:
        if m == n:
            return 1  # 28
        else:
            return 0  # 28
    else:
        if m % 10 == n:
            x = 1 + kol_numbers1(m // 10, n)   # x 28
            return x
        else:
            x = 0 + kol_numbers1(m // 10, n)    # x 28
            return x


def kol_numbers2(m, n):            # занимает 56 байта
    print('kol_numbers2')
    kol = 0
    print('len(str(m))', sys.getsizeof(len(str(m))))  # len(str(m)) 28
    for i in range(len(str(m))):
        if m % 10 == n:
            kol += 1
        m = m // 10
    print('kol', sys.getsizeof(kol))     # kol 28


def kol_numbers3(m, n):            # занимает 212 байта
    print('kol_numbers3')
    m_list = []
    for el in str(m):
        m_list.append(el)
    print('m_list', sys.getsizeof(m_list))    # m_list 184
    x = m_list.count(str(n))
    print('x', sys.getsizeof(x))     # x 28


print('kol_numbers1')
print(sys.getsizeof(kol_numbers1(5666666666666666, 6)))
kol_numbers2(5666666666666666, 6)
kol_numbers3(5666666666666666, 6)

"""
Вывод:
Самой затратной по памяти программе является 1 весрия (рекурсия),
во сколько раз мы углубляемся в рекурсию во столько раз увеличивается 
память занимающая данная программа.
3 весрия программы будет занимать меньше памяти чем 1 за счёт использования 
функции list а также метод count, но всё равно она будет занимать больше чем
2 версия.
2 версия самая экономическая так как занимает самое меньшее количество байтов.
"""
